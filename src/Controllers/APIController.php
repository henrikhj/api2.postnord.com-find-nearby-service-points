<?php
/*
 * Api2PostnordComFindNearbyServicePointsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 06/29/2016
 */

namespace Api2PostnordComFindNearbyServicePointsLib\Controllers;

use Api2PostnordComFindNearbyServicePointsLib\APIException;
use Api2PostnordComFindNearbyServicePointsLib\APIHelper;
use Api2PostnordComFindNearbyServicePointsLib\Configuration;
use Api2PostnordComFindNearbyServicePointsLib\Models;
use Api2PostnordComFindNearbyServicePointsLib\Http\HttpRequest;
use Api2PostnordComFindNearbyServicePointsLib\Http\HttpResponse;
use Api2PostnordComFindNearbyServicePointsLib\Http\HttpMethod;
use Api2PostnordComFindNearbyServicePointsLib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class APIController extends BaseController {

    /**
     * @var APIController The reference to *Singleton* instance of this class
     */
    private static $instance;
    
    /**
     * Returns the *Singleton* instance of this class.
     * @return APIController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Provides the default Service Point for a postal code.
     * @param  string          $apikey          Required parameter: The unique consumer (client) identifier 32 characters
     * @param  string          $countryCode     Required parameter: Country code in ISO 3166-1: FI, NO or SE
     * @param  string          $postalCode      Required parameter: Postal code to search for.
     * @param  string          $returntype      Required parameter: Response Content-Type
     * @param  string|null     $locale          Optional parameter: Default is en. Allowed values are en, sv, no, da and fi
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function findByPostalCode (
                $apikey,
                $countryCode,
                $postalCode,
                $returntype,
                $locale = 'en') 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/rest/businesslocation/v1/servicepoint/findByPostalCode.{returntype}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'returntype'  => $returntype,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'apikey'      => $apikey,
            'countryCode' => $countryCode,
            'postalCode'  => $postalCode,
            'locale'      => (null != $locale) ? $locale : 'en',
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('The server did not understand or could not validate the input parameters. More information about the cause of the error is available in the compositeFault object.', 400, $response->body);
        }

        else if ($response->code == 500) {
            throw new APIException('The server experienced a runtime exception while processing the request. Try again later or contact customer support.', 500, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\ResponseDto());
    }
        
    /**
     * Provides the nearest Service Points from a location defined by an address. Distance is based on driving route. The search is done within one country.
     * @param  string           $apikey                    Required parameter: The unique consumer (client) identifier 32 characters
     * @param  string           $countryCode               Required parameter: Country code in ISO 3166-1: FI, NO, DK or SE
     * @param  string           $returntype                Required parameter: Response Content-Type
     * @param  string|null      $city                      Optional parameter: Name of the city. *Mandatory, if Postal Code is not provided.
     * @param  string|null      $locale                    Optional parameter: Default is en. Allowed values are en, sv, no, da and fi
     * @param  integer|null     $numberOfServicePoints     Optional parameter: The number of service points to be returned (Default value is 5).
     * @param  string|null      $postalCode                Optional parameter: Postal Code. *Mandatory, if City is not provided.
     * @param  string|null      $srId                      Optional parameter: An EPSG Spatial Reference System Identifier (SRID) is a unique value used to unambiguously identify projected, unprojected, and local spatial coordinate system definitions. Default value is EPSG:4326
     * @param  string|null      $streetName                Optional parameter: Name of the street
     * @param  string|null      $streetNumber              Optional parameter: Street Number
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function findNearestByAddress (
                $apikey,
                $countryCode,
                $returntype,
                $city = 'Stockholm',
                $locale = 'en',
                $numberOfServicePoints = 10,
                $postalCode = NULL,
                $srId = NULL,
                $streetName = 'Cardellgatan',
                $streetNumber = NULL) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/rest/businesslocation/v1/servicepoint/findNearestByAddress.{returntype}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'returntype'            => $returntype,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'apikey'                => $apikey,
            'countryCode'           => $countryCode,
            'city'                  => (null != $city) ? $city : 'Stockholm',
            'locale'                => (null != $locale) ? $locale : 'en',
            'numberOfServicePoints' => (null != $numberOfServicePoints) ? $numberOfServicePoints : 10,
            'postalCode'            => $postalCode,
            'srId'                  => $srId,
            'streetName'            => (null != $streetName) ? $streetName : 'Cardellgatan',
            'streetNumber'          => $streetNumber,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'          => 'APIMATIC 2.0',
            'Accept'              => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('The server did not understand or could not validate the input parameters. More information about the cause of the error is available in the compositeFault object.', 400, $response->body);
        }

        else if ($response->code == 500) {
            throw new APIException('The server experienced a runtime exception while processing the request. Try again later or contact customer support.', 500, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\ResponseDto());
    }
        
    /**
     * Provides the nearest Service Points from a location defined by geo co-ordinates. Distance is based on driving route. The search is done within one country.
     * @param  string           $apikey                    Required parameter: The unique consumer (client) identifier 32 characters
     * @param  string           $countryCode               Required parameter: Country code in ISO 3166-1: FI, NO, DK or SE
     * @param  double           $easting                   Required parameter: The Easting Co-ordinate
     * @param  double           $northing                  Required parameter: The Northing Co-ordinate
     * @param  string           $returntype                Required parameter: Response Content-Type
     * @param  string|null      $locale                    Optional parameter: Default is en. Allowed values are en, sv, no, da and fi
     * @param  integer|null     $numberOfServicePoints     Optional parameter: The number of service points to be returned (Default value is 5)
     * @param  string|null      $srId                      Optional parameter: An EPSG Spatial Reference System Identifier (SRID) is a unique value used to unambiguously identify projected, unprojected, and local spatial coordinate system definitions. Default value is EPSG:4326
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function findNearestByCoordinates (
                $apikey,
                $countryCode,
                $easting,
                $northing,
                $returntype,
                $locale = 'en',
                $numberOfServicePoints = NULL,
                $srId = NULL) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/rest/businesslocation/v1/servicepoint/findNearestByCoordinates.{returntype}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'returntype'            => $returntype,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'apikey'                => $apikey,
            'countryCode'           => $countryCode,
            'easting'               => $easting,
            'northing'              => $northing,
            'locale'                => (null != $locale) ? $locale : 'en',
            'numberOfServicePoints' => $numberOfServicePoints,
            'srId'                  => $srId,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'          => 'APIMATIC 2.0',
            'Accept'              => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('The server did not understand or could not validate the input parameters. More information about the cause of the error is available in the compositeFault object.', 400, $response->body);
        }

        else if ($response->code == 500) {
            throw new APIException('The server experienced a runtime exception while processing the request. Try again later or contact customer support.', 500, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\ResponseDto());
    }
        

}